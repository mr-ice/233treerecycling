#!/usr/bin/env python3
"""Split a Tree Recycling List from Google Docs. 

1. Download as an xlsx
2. Run ./dockerrun splitter [Filename].xlsx

This will create the xlsx and csv splitting the sheet on the 'Route'
column values.

TBD: pdf generation through wkhtmltopdf is not optimal, trying a
nodejs/chromium/puppeteer mechanism next. """

import pandas as pd
import numpy as np
import argparse
import time
import os

AP = argparse.ArgumentParser("Tree Route Splitter")


AP.add_argument('input',
                help="Input file should be an xlsx from the tree "
                "recycling google doc.")

AP.add_argument('--output',
                help="Output directory, default will be YYYYSplit",
                default= str(time.localtime().tm_year) + 'Split' )

AP.add_argument('--sheet',
                help="The name of the sheet with responses "
                "default is 'Form Responses 1'",
                default="Form Responses 1")

AP.add_argument('--route-column',
                help="The name of the column in the sheet with route names "
                ", default is 'Route'",
                default="Route")

# AP.add_argument('--orientation',
#                 default="Landscape",
#                 help="The orientation of the pdf, either 'Portrait' or"
#                 " 'Landscape'(default)")
#
# AP.add_argument('--page-size',
#                 default='Letter',
#                 help="The page size for the pdf output, either 'A4' or"
#                 " 'Letter'(default)")

args = AP.parse_args()

# This loads the master list from the sheet named args.sheet
master_list = pd.read_excel(args.input, sheet_name=args.sheet)
master_list.replace(np.nan, '')

routes = set()
for i in master_list[args.route_column]:
    routes.add(i)
#print(routes)

# options = {
#             'orientation' : args.orientation,
# #           'margin-top': '0.75in',
#             'page-size': args.page_size
#           }
pd.set_option('display.max_colwidth', None)

if not os.path.isdir(args.output):
    os.mkdir(args.output)

for route in routes:
    output_filename = f'./{args.output}/route_{route}.'
    writer = pd.ExcelWriter(output_filename + 'xlsx',
            engine='xlsxwriter')

    # fetch the current route as a dataframe from the master_list
    this_route = master_list.loc[master_list['Route'] == route]
    human_route = this_route[['Name']].copy()
    human_route['Gate'] = this_route['Gate Code (required if gated access)'].fillna('').astype(str)
    human_route['Phone'] = this_route['Phone Number'].fillna('').astype(str)
    human_route['Trees'] = this_route['Number of Trees'].fillna('').astype(str)
    human_route['Home'] = this_route['Will someone be home'].fillna('').astype(str)
    human_route['Comment'] = this_route['Comments (special instructions,  where tree or payment is located)'].fillna('')
    human_route['Address'] = this_route['House #'].astype(str) + ' ' + this_route['Street']  + ' ' + this_route['City']
    human_route['Apt'] = this_route['Apt. Number'].fillna('').astype(str)
    human_route['$Cash'] = ' '
    human_route['$Check'] = ' '
    human_route['Got'] = 'Y / N'
    human_route.to_excel(writer)
    writer.save()
    df = pd.DataFrame.from_dict(human_route)
    df.to_html(output_filename + 'html')
    # removing the wkhtmltopdf writing
    # pdf.from_file(output_filename + 'html', output_filename + 'pdf', options=options)
    df.to_csv(output_filename + 'csv', sep=';', encoding='utf-8')

